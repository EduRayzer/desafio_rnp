version: '3.8'

services:
  # Serviço do Agente de Monitoramento Web
  monitor_agent:
    build:
      context: ./monitor-agent
      dockerfile: Dockerfile
    container_name: web_monitor_agent
    # ports:
    #   - "8000:8000"
    restart: unless-stopped
    networks:
      - monitor_net
    depends_on: 
      - mongodb

  # Serviço do Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    restart: unless-stopped
    networks:
      - monitor_net

  # Serviço do Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    volumes:
      - grafana_data:/var/lib/grafana
  # --- Provisionamento de Dashboards (Opcional) ---
      # Para que os dashboards sejam carregados automaticamente no Grafana:
      # 1. Certifique-se de que o arquivo JSON do dashboard exportado está em ./grafana/dashboards/
      # 2. Descomente as duas linhas abaixo:
      #- ./grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards
      #- ./grafana/provisioning/dashboards/dashboards.yaml:/etc/grafana/provisioning/dashboards/dashboards.yaml
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=desafio_rnp123
    ports:
      - "3000:3000"
    restart: unless-stopped
    networks:
      - monitor_net

  # MongoDB
  mongodb:
    image: mongo:latest 
    container_name: mongodb
    ports:
      - "27017:27017" 
    volumes:
      - mongodb_data:/data/db 
    restart: unless-stopped
    networks:
      - monitor_net

# Definição de redes
networks:
  monitor_net:
    driver: bridge

# Definição de volumes para persistência de dados
volumes:
  prometheus_data:
  grafana_data:
  mongodb_data: 